//
//  MapViewController.swift
//  yaaulyanenkovPW7
//
//  Created by Ярослав Ульяненков on 17.01.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import YandexMapsMobile
import CoreLocation

protocol MapDisplayLogic: AnyObject
{
    func displaySomething(viewModel: Map.Something.ViewModel)
}

class MapViewController: UIViewController, MapDisplayLogic
{
    var interactor: MapBusinessLogic?
    var router: (NSObjectProtocol & MapRoutingLogic & MapDataPassing)?
    var locationManager: CLLocationManager?
    var didMoveCamera = false
    
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
        configureUI()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
        configureUI()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        locationManager = getLocationManager()
        locationManager?.requestWhenInUseAuthorization()
        let viewController = self
        let interactor = MapInteractor()
        let presenter = MapPresenter()
        let router = MapRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func getLocationManager() -> CLLocationManager {
        let locationManager = CLLocationManager()
        if CLLocationManager.locationServicesEnabled() {
            locationManager.delegate = self
            locationManager.desiredAccuracy =
            kCLLocationAccuracyNearestTenMeters
            locationManager.startUpdatingLocation()
        }
        return locationManager;
    }
    
    private let mapView: YMKMapView = {
        let mapView = YMKMapView()
        mapView.clearsContextBeforeDrawing = true
        mapView.translatesAutoresizingMaskIntoConstraints = false
        return mapView
    }()
    
    lazy var map: YMKMap = {
        return mapView.mapWindow.map
    }()
    
    lazy var mapWindow: YMKMapWindow = {
        return mapView.mapWindow
    }()
    
    var mapObkjects: YMKMapObjectCollection {
        return map.mapObjects
    }
    
    var center: YMKPoint {
        return map.cameraPosition.target
    }
    
    static func getField(placeholder: String) -> UITextField {
        let field = UITextField()
        field.backgroundColor = .systemGray5
        field.textColor = .black
        field.placeholder = placeholder
        field.layer.cornerRadius = 2
        field.clipsToBounds = true
        
        field.font = UIFont.systemFont(ofSize: 15)
        field.font = UIFont.systemFont(ofSize: 15)
        field.borderStyle = UITextField.BorderStyle.roundedRect
        field.autocorrectionType = UITextAutocorrectionType.yes
        field.keyboardType = UIKeyboardType.default
        field.returnKeyType = UIReturnKeyType.done
        field.clearButtonMode = UITextField.ViewMode.whileEditing
        field.contentVerticalAlignment = UIControl.ContentVerticalAlignment.center
        return field
    }
    
    let startLocation = getField(placeholder: "From")
    let endLocation = getField(placeholder: "To")
    var goButton: UIButton?
    var clearButton: UIButton?
    
    private func configureUI() {
        mapView.frame = view.bounds
        view.addSubview(mapView)
        
        let textStack = UIStackView()
        
        textStack.axis = .vertical
        view.addSubview(textStack)
        textStack.spacing = 10
        textStack.pin(to: view, [.top: 20, .left: 10, .right: 10])
        [startLocation, endLocation].forEach { textField in
            textField.setHeight(to: 40)
            textField.delegate = self
            textStack.addArrangedSubview(textField)
        }
        
        goButton = MapNavigationButton(type: .blue)
        goButton?.setTitle( "Go", for: .normal)
        goButton?.setWidth(to: view.bounds.width * 0.45)
        clearButton = MapNavigationButton(type: .grey)
        clearButton?.setTitle( "Clear", for: .normal)
        clearButton?.setWidth(to: view.bounds.width * 0.45)
        clearButton?.addTarget(self, action: #selector(clearButtonWasPressed), for: .touchUpInside)
        guard let goButton = goButton, let clearButton = clearButton else {
            return
        }
        clearButton.isEnabled = false
        goButton.isEnabled = false
        let stackView = UIStackView(arrangedSubviews: [goButton, clearButton])
        stackView.distribution = .equalSpacing
        stackView.axis = .horizontal
        view.addSubview(stackView)
        stackView.pin(to: view, [.left, .bottom, .right], 16)
    }
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        let tap = UITapGestureRecognizer(target: self, action: (#selector(handleTap)))
        view.addGestureRecognizer(tap)
        doSomething()
    }
    
    @objc func handleTap() {
        startLocation.resignFirstResponder()
        endLocation.resignFirstResponder()
    }
    
    @objc func clearButtonWasPressed(button: UIButton) {
        startLocation.text = ""
        endLocation.text = ""
        button.setTitleColor(.gray, for: .disabled)
        button.isEnabled = false
        goButton?.isEnabled = false
        map.mapObjects.clear()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = Map.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Map.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
}


extension MapViewController : CLLocationManagerDelegate {
    func locationManager(_ manager: CLLocationManager,
                         didUpdateLocations locations: [CLLocation]) {
        guard let coord: CLLocationCoordinate2D =
                manager.location?.coordinate else { return }
        let location = YMKPoint(latitude: coord.latitude, longitude: coord.longitude)
        if !self.didMoveCamera {
            self.didMoveCamera = true
            map.move(with:YMKCameraPosition(target: location, zoom: 15, azimuth: 0, tilt: 0),
                     animationType: YMKAnimation(type: YMKAnimationType.smooth, duration: 1),
                     cameraCallback: nil)
        }
    }
}

extension MapViewController : UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder() // dismiss keyboard
        return true
    }
    
    func textFieldDidEndEditing(_ textField: UITextField) {
        if startLocation.text?.isEmpty ?? true && endLocation.text?.isEmpty ?? true {
            goButton?.isEnabled = false
            clearButton?.isEnabled = false
        } else if !(startLocation.text?.isEmpty ?? true) && !(endLocation.text?.isEmpty ?? true)  {
            print("worked")
            goButton?.isEnabled = true
            clearButton?.isEnabled = true
        } else {
            clearButton?.isEnabled = true
            goButton?.isEnabled = false
        }
    }
}
